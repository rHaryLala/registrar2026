"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { Inertia } from "@inertiajs/inertia"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { ChevronLeft, ChevronRight, Mail, User, Phone, MapPin } from "lucide-react"

const formatPhone = (value: string) => {
  const numbers = value.replace(/\D/g, "").slice(0, 10)
  return numbers.replace(/(\d{3})(\d{2})(\d{3})(\d{2})/, "$1 $2 $3 $4")
}

// Fonction pour générer l'email automatiquement
const generateEmail = (nom: string, prenom: string): string => {
  if (!nom || !prenom) return ""

  const nomFormatted = nom.toLowerCase().trim()
  const prenomFormatted = prenom.toLowerCase().trim()

  // Prendre les 3 premières lettres du prénom
  const troisLettresPrenom = prenomFormatted.slice(0, 3)

  return `${nomFormatted}.${troisLettresPrenom}@zurcher.edu.mg`
}

// Fonction pour calculer l'âge à partir de la date de naissance
const calculateAge = (dateNaissance: string): number => {
  if (!dateNaissance) return 0

  const birthDate = new Date(dateNaissance)
  const today = new Date()
  let age = today.getFullYear() - birthDate.getFullYear()
  const monthDiff = today.getMonth() - birthDate.getMonth()

  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
    age--
  }

  return age
}

const initialForm = {
  // Informations personnelles
  nom: "",
  prenom: "",
  sexe: "",
  date_naissance: "",
  lieu_naissance: "",
  nationalite: "",
  religion: "",
  etat_civil: "",
  nom_conjoint: "",
  nb_enfant: "",
  photo: "",

  // Informations CIN (conditionnel)
  cin_numero: "",
  cin_date_delivrance: "",
  cin_lieu_delivrance: "",

  // Coordonnées
  adresse: "",
  region: "",
  telephone: "",
  email: "",
  password: "",

  // Scolarité
  annee_etude: "",
  status: "",
  bacc_serie: "",
  bacc_date_obtention: "",
  annee_scolaire: "",
  periode: "",
  appartement: "",
  situation_familiale: "",
  bursary_status: false,
  new_student: false,
  graduated: false,
  graduation_date: "",

  // Informations sponsor (conditionnel)
  sponsor_nom: "",
  sponsor_prenom: "",
  sponsor_telephone: "",
  sponsor_adresse: "",

  mention_envisagee: "",

  // Administration
  remove: false,
  date_entry: "",
  last_change_user_id: "",
  last_change_datetime: "",
}

interface StudentFormModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  onSuccess?: () => void
}

export default function StudentFormModal({ open, onOpenChange, onSuccess }: StudentFormModalProps) {
  const [form, setForm] = useState(initialForm)
  const [step, setStep] = useState(1)
  const [autoGeneratedEmail, setAutoGeneratedEmail] = useState("")
  const [age, setAge] = useState(0)

  // Calculer l'âge quand la date de naissance change
  useEffect(() => {
    if (form.date_naissance) {
      const calculatedAge = calculateAge(form.date_naissance)
      setAge(calculatedAge)
    } else {
      setAge(0)
    }
  }, [form.date_naissance])

  // Générer l'email automatiquement quand le nom ou prénom change
  useEffect(() => {
    if (form.nom && form.prenom) {
      const generatedEmail = generateEmail(form.nom, form.prenom)
      setAutoGeneratedEmail(generatedEmail)

      // Mettre à jour le champ email dans le form
      setForm((prev) => ({
        ...prev,
        email: generatedEmail,
      }))
    } else {
      setAutoGeneratedEmail("")
    }
  }, [form.nom, form.prenom])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const target = e.target
    const { name, value, type } = target
    setForm({
      ...form,
      [name]: type === "checkbox" ? (target as HTMLInputElement).checked : value,
    })
  }

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value
    setForm({
      ...form,
      telephone: formatPhone(value),
    })
  }

  const handleSponsorPhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value
    setForm({
      ...form,
      sponsor_telephone: formatPhone(value),
    })
  }

  const handleNext = (e: React.MouseEvent) => {
    e.preventDefault()
    setStep((s) => Math.min(s + 1, 4))
  }

  const handlePrev = (e: React.MouseEvent) => {
    e.preventDefault()
    setStep((s) => Math.max(s - 1, 1))
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    Inertia.post("/students", form, {
      onSuccess: () => {
        onOpenChange(false)
        setStep(1)
        setForm(initialForm)
        setAutoGeneratedEmail("")
        setAge(0)
        onSuccess?.()
      },
    })
  }

  const handleCancel = () => {
    onOpenChange(false)
    setStep(1)
    setForm(initialForm)
    setAutoGeneratedEmail("")
    setAge(0)
  }

  const stepTitles = ["Informations personnelles", "Coordonnées", "Scolarité", "Informations académiques"]

  const isMajeur = age >= 18
  const isMarie = form.etat_civil === "marié"

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <span className="bg-primary text-primary-foreground rounded-full w-6 h-6 flex items-center justify-center text-sm">
              {step}
            </span>
            {stepTitles[step - 1]}
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6 py-4">
          {/* Étape 1: Informations personnelles */}
          {step === 1 && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="nom">Nom *</Label>
                <Input id="nom" name="nom" placeholder="Nom" value={form.nom} onChange={handleChange} required />
              </div>

              <div className="space-y-2">
                <Label htmlFor="prenom">Prénom *</Label>
                <Input
                  id="prenom"
                  name="prenom"
                  placeholder="Prénom"
                  value={form.prenom}
                  onChange={handleChange}
                  required
                />
              </div>

              {autoGeneratedEmail && (
                <div className="md:col-span-2 space-y-2">
                  <Label className="text-sm font-medium flex items-center gap-2">
                    <Mail className="h-4 w-4" />
                    Email généré automatiquement
                  </Label>
                  <div className="p-3 border rounded-md bg-muted/50 text-sm">{autoGeneratedEmail}</div>
                  <p className="text-xs text-muted-foreground">Format: nom.3premièresLettresPrenom@zurcher.edu.mg</p>
                </div>
              )}

              <div className="space-y-2">
                <Label htmlFor="sexe">Sexe *</Label>
                <select
                  id="sexe"
                  name="sexe"
                  value={form.sexe}
                  onChange={handleChange}
                  required
                  className="w-full border rounded-md p-2"
                >
                  <option value="">Sélectionnez le sexe</option>
                  <option value="M">Masculin</option>
                  <option value="F">Féminin</option>
                </select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="date_naissance">Date de naissance *</Label>
                <Input
                  id="date_naissance"
                  name="date_naissance"
                  type="date"
                  value={form.date_naissance}
                  onChange={handleChange}
                  required
                />
                {form.date_naissance && (
                  <p className="text-sm text-muted-foreground">
                    Âge: {age} ans {isMajeur ? "(Majeur)" : "(Mineur)"}
                  </p>
                )}
              </div>

              <div className="space-y-2">
                <Label htmlFor="lieu_naissance">Lieu de naissance *</Label>
                <Input
                  id="lieu_naissance"
                  name="lieu_naissance"
                  placeholder="Lieu de naissance"
                  value={form.lieu_naissance}
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="nationalite">Nationalité *</Label>
                <Input
                  id="nationalite"
                  name="nationalite"
                  placeholder="Nationalité"
                  value={form.nationalite}
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="religion">Religion</Label>
                <Input
                  id="religion"
                  name="religion"
                  placeholder="Religion"
                  value={form.religion}
                  onChange={handleChange}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="etat_civil">État civil *</Label>
                <select
                  id="etat_civil"
                  name="etat_civil"
                  value={form.etat_civil}
                  onChange={handleChange}
                  required
                  className="w-full border rounded-md p-2"
                >
                  <option value="">Sélectionnez l'état civil</option>
                  <option value="célibataire">Célibataire</option>
                  <option value="marié">Marié(e)</option>
                  <option value="divorcé">Divorcé(e)</option>
                  <option value="veuf">Veuf/Veuve</option>
                </select>
              </div>

              {/* Section conjoint conditionnelle */}
              {isMarie && (
                <>
                  <div className="space-y-2 md:col-span-2">
                    <Label htmlFor="nom_conjoint" className="flex items-center gap-2">
                      <User className="h-4 w-4" />
                      Nom du/de la conjoint(e) *
                    </Label>
                    <Input
                      id="nom_conjoint"
                      name="nom_conjoint"
                      placeholder="Nom complet du conjoint"
                      value={form.nom_conjoint}
                      onChange={handleChange}
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="nb_enfant">Nombre d'enfants</Label>
                    <Input
                      id="nb_enfant"
                      name="nb_enfant"
                      type="number"
                      placeholder="0"
                      value={form.nb_enfant}
                      onChange={handleChange}
                      min={0}
                    />
                  </div>
                </>
              )}

              {/* Section CIN conditionnelle pour les majeurs */}
              {isMajeur && (
                <>
                  <div className="md:col-span-2 border-t pt-4 mt-4">
                    <h4 className="font-medium text-lg mb-4">Informations CIN (Carte d'Identité Nationale)</h4>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="cin_numero">Numéro CIN *</Label>
                    <Input
                      id="cin_numero"
                      name="cin_numero"
                      placeholder="Numéro de CIN"
                      value={form.cin_numero}
                      onChange={handleChange}
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="cin_date_delivrance">Date de délivrance *</Label>
                    <Input
                      id="cin_date_delivrance"
                      name="cin_date_delivrance"
                      type="date"
                      value={form.cin_date_delivrance}
                      onChange={handleChange}
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="cin_lieu_delivrance">Lieu de délivrance *</Label>
                    <Input
                      id="cin_lieu_delivrance"
                      name="cin_lieu_delivrance"
                      placeholder="Lieu de délivrance"
                      value={form.cin_lieu_delivrance}
                      onChange={handleChange}
                      required
                    />
                  </div>
                </>
              )}
            </div>
          )}

          {/* Étape 2: Coordonnées */}
          {step === 2 && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="telephone">Téléphone</Label>
                <Input
                  id="telephone"
                  name="telephone"
                  placeholder="032 12 345 67"
                  value={form.telephone}
                  onChange={handlePhoneChange}
                  pattern="^03[2348]\s\d{2}\s\d{3}\s\d{2}$"
                  title="Format: 03X XX XXX XX"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="email" className="flex items-center gap-2">
                  <Mail className="h-4 w-4" />
                  Email *
                </Label>
                <Input
                  id="email"
                  name="email"
                  type="email"
                  value={form.email}
                  onChange={handleChange}
                  required
                  disabled
                  className="bg-muted/50"
                />
              </div>

              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="adresse">Adresse *</Label>
                <Input
                  id="adresse"
                  name="adresse"
                  placeholder="Adresse complète"
                  value={form.adresse}
                  onChange={handleChange}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="region">Région *</Label>
                <select
                  id="region"
                  name="region"
                  value={form.region}
                  onChange={handleChange}
                  required
                  className="w-full border rounded-md p-2"
                >
                  <option value="">Sélectionnez une région</option>
                  <option value="Analamanga">Analamanga</option>
                  <option value="Vakinankaratra">Vakinankaratra</option>
                  <option value="Itasy">Itasy</option>
                  <option value="Bongolava">Bongolava</option>
                  <option value="Menabe">Menabe</option>
                  <option value="Melaky">Melaky</option>
                  <option value="Atsimo-Andrefana">Atsimo-Andrefana</option>
                  <option value="Androy">Androy</option>
                  <option value="Anosy">Anosy</option>
                  <option value="Ihorombe">Ihorombe</option>
                  <option value="Haute Matsiatra">Haute Matsiatra</option>
                  <option value="Amoron'i Mania">Amoron'i Mania</option>
                  <option value="Vatovavy">Vatovavy</option>
                  <option value="Fitovinany">Fitovinany</option>
                  <option value="Atsimo-Atsinanana">Atsimo-Atsinanana</option>
                  <option value="Atsinanana">Atsinanana</option>
                  <option value="Analanjirofo">Analanjirofo</option>
                  <option value="Alaotra-Mangoro">Alaotra-Mangoro</option>
                  <option value="Boeny">Boeny</option>
                  <option value="Sofia">Sofia</option>
                  <option value="Betsiboka">Betsiboka</option>
                  <option value="Diana">Diana</option>
                  <option value="Sava">Sava</option>
                </select>
              </div>
            </div>
          )}

          {/* Étape 3: Scolarité */}
          {step === 3 && (
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

                <div className="space-y-2">
                  <Label htmlFor="bacc_serie">Série du Baccalauréat</Label>
                  <select
                    id="bacc_serie"
                    name="bacc_serie"
                    value={form.bacc_serie}
                    onChange={handleChange}
                    className="w-full border rounded-md p-2"
                  >
                    <option value="">Sélectionnez la série</option>
                    <option value="A1">A1</option>
                    <option value="A2">A2</option>
                    <option value="D">D</option>
                    <option value="C">C</option>
                    <option value="S">S</option>
                    <option value="L">L</option>
                    <option value="OSE">OSE</option>
                    <option value="Technique">Technique</option>
                  </select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="bacc_date_obtention">Date d'obtention du Bac</Label>
                  <Input
                    id="bacc_date_obtention"
                    name="bacc_date_obtention"
                    type="date"
                    value={form.bacc_date_obtention}
                    onChange={handleChange}
                  />
                </div>

                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="bursary_status"
                    name="bursary_status"
                    checked={form.bursary_status}
                    onChange={handleChange}
                    className="rounded"
                  />
                  <Label htmlFor="bursary_status">Boursier/Sponsorisé</Label>
                </div>

              </div>

              {/* Section sponsor conditionnelle */}
              {form.bursary_status && (
                <div className="border-t pt-6 mt-6">
                  <h4 className="font-medium text-lg mb-4 flex items-center gap-2">
                    <User className="h-5 w-5" />
                    Informations du Sponsor
                  </h4>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="sponsor_nom">Nom du sponsor *</Label>
                      <Input
                        id="sponsor_nom"
                        name="sponsor_nom"
                        placeholder="Nom du sponsor"
                        value={form.sponsor_nom}
                        onChange={handleChange}
                        required
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="sponsor_prenom">Prénom du sponsor *</Label>
                      <Input
                        id="sponsor_prenom"
                        name="sponsor_prenom"
                        placeholder="Prénom du sponsor"
                        value={form.sponsor_prenom}
                        onChange={handleChange}
                        required
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="sponsor_telephone" className="flex items-center gap-2">
                        <Phone className="h-4 w-4" />
                        Téléphone du sponsor *
                      </Label>
                      <Input
                        id="sponsor_telephone"
                        name="sponsor_telephone"
                        placeholder="032 12 345 67"
                        value={form.sponsor_telephone}
                        onChange={handleSponsorPhoneChange}
                        required
                      />
                    </div>

                    <div className="space-y-2 md:col-span-2">
                      <Label htmlFor="sponsor_adresse" className="flex items-center gap-2">
                        <MapPin className="h-4 w-4" />
                        Adresse du sponsor *
                      </Label>
                      <Input
                        id="sponsor_adresse"
                        name="sponsor_adresse"
                        placeholder="Adresse complète du sponsor"
                        value={form.sponsor_adresse}
                        onChange={handleChange}
                        required
                      />
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Étape 4: Informations académiques */}
          {step === 4 && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="mention_envisagee">Mention envisagée *</Label>
                <select
                  id="mention_envisagee"
                  name="mention_envisagee"
                  value={form.mention_envisagee}
                  onChange={handleChange}
                  required
                  className="w-full border rounded-md p-2"
                >
                  <option value="">Sélectionnez la mention</option>
                  <option value="Théologie">Théologie</option>
                  <option value="Gestion">Gestion</option>
                  <option value="Informatique">Informatique</option>
                  <option value="Sciences infirmières">Sciences infirmières</option>
                  <option value="Éducation">Éducation</option>
                  <option value="Communication">Communication</option>
                  <option value="Droit">Droit</option>
                </select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="date_entry">Date d'entrée</Label>
                <Input id="date_entry" name="date_entry" type="date" value={form.date_entry} onChange={handleChange} />
              </div>

              <div className="space-y-2">
                <Label htmlFor="last_change_user_id">ID utilisateur modification</Label>
                <Input
                  id="last_change_user_id"
                  name="last_change_user_id"
                  type="number"
                  placeholder="ID"
                  value={form.last_change_user_id}
                  onChange={handleChange}
                />
              </div>

              <div className="space-y-2 md:col-span-2">
                <Label htmlFor="last_change_datetime">Date de modification</Label>
                <Input
                  id="last_change_datetime"
                  name="last_change_datetime"
                  type="datetime-local"
                  value={form.last_change_datetime}
                  onChange={handleChange}
                />
              </div>
            </div>
          )}

          {/* Footer avec boutons bien organisés */}
          <DialogFooter className="flex flex-col sm:flex-row gap-3 justify-between items-center pt-6 border-t">
            <div className="flex-1">
              {step > 1 && (
                <Button
                  type="button"
                  variant="outline"
                  onClick={handlePrev}
                  className="w-full sm:w-auto bg-transparent"
                >
                  <ChevronLeft className="h-4 w-4 mr-2" />
                  Précédent
                </Button>
              )}
            </div>

            <div className="flex gap-2 order-2 sm:order-3">
              <Button
                variant="outline"
                type="button"
                onClick={handleCancel}
                className="flex-1 sm:flex-none bg-transparent"
              >
                Annuler
              </Button>
            </div>

            <div className="flex-1 flex justify-end order-1 sm:order-2">
              {step < 4 ? (
                <Button type="button" onClick={handleNext} className="w-full sm:w-auto">
                  Suivant
                  <ChevronRight className="h-4 w-4 ml-2" />
                </Button>
              ) : (
                <Button type="submit" className="w-full sm:w-auto">
                  Enregistrer
                </Button>
              )}
            </div>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}
